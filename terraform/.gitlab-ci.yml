include:
  - template: Terraform/Base.gitlab-ci.yml

variables:
  DOCKER_TLS_CERTDIR: ""
  TF_STATE_NAME: default
  TF_CACHE_KEY: default
  TF_ROOT: terraform/environments/production
  TF_VAR_app_id: "a744dd68a63911ecb9090242ac120002"
  TF_VAR_region: "sa-east-1"
  TF_VAR_domain: "torosports.app"
  TF_VAR_email_from: "noreply@torosports.app"
  TF_VAR_tag_name: "torosports"
  TF_VAR_project_name: "Toro Sports"
  TF_VAR_rds_instance_class: "db.t3.medium"
  TF_VAR_ec2_instance_class: "t2.medium"
  BRANCH_MASTER: "master"
  BRANCH_RELEASE: "release"

stages:
  - build-staging
  - deploy-staging
  - validate
  - build
  - deploy
  - prod-app-build


# ***************************************** #
# The following stages will configure       #
# the app on staging environment            #
# ***************************************** #

build-staging:
  image: docker:stable
  services:
    - docker:19.03-dind
  stage: build-staging
  before_script:
    - apk add --update make ca-certificates openssl
    - apk add --no-cache curl jq git
    - apk add --update --no-cache build-base python3-dev python3 libffi-dev
    - curl -X POST -d "token=${SLACK_BOT_TOKEN}&channel=${SLACK_CHANNEL}&text=- *-------------------------------------*" ${SLACK_API_URL}
    - curl -X POST -d "token=${SLACK_BOT_TOKEN}&channel=${SLACK_CHANNEL}&text=- *api do projeto toro-sports*..."  ${SLACK_API_URL}
    - curl -X POST -d "token=${SLACK_BOT_TOKEN}&channel=${SLACK_CHANNEL}&text=- 1/3 | Iniciando build da imagem docker da *api do projeto toro-sports*..." ${SLACK_API_URL}
    - VERSION=${CI_COMMIT_SHA:0:8}
    - echo $VERSION
    - update-ca-certificates
    - echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - google-cloud-sdk/bin/gcloud config list
    - docker login -u oauth2accesstoken -p "$(google-cloud-sdk/bin/gcloud auth print-access-token)" gcr.io/xapps-software
  script:
    - docker build --pull -t gcr.io/xapps-software/toro-sports-api:$VERSION .
    - docker push gcr.io/xapps-software/toro-sports-api:$VERSION
    - curl -X POST -d "token=${SLACK_BOT_TOKEN}&channel=${SLACK_CHANNEL}&text=- 2/3 | Finalizando deploy da imagem do *api do projeto toro-sports* no GCP..." ${SLACK_API_URL}
    - curl -X POST -d "token=${SLACK_BOT_TOKEN}&channel=${SLACK_CHANNEL}&text=- *-------------------------------------*" ${SLACK_API_URL}
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH_RELEASE
  dependencies: []

deploy-staging:
  image: andrebassi/rancher-kubectl:v1.17.3
  services:
    - docker:19.03-dind
  stage: deploy-staging
  before_script:
    - VERSION=${CI_COMMIT_SHA:0:8}
    - echo $VERSION
    - rancher login https://rancher.staging-xapps.dev/ --token $RANCHER_TOKEN --context $RANCHER_PROJECTS_CONTEXT
    - rancher context current
    - rancher kubectl set image deployment/toro-sports-api toro-sports-api=gcr.io/xapps-software/toro-sports-api:$VERSION -n projetos --record
  script:
    - curl -X POST -d "token=${SLACK_BOT_TOKEN}&channel=${SLACK_CHANNEL}&text=- 3/3 | Finalizamos a publicação e disponibilizamos a última versão do projeto no *ambiente de staging da api do projeto toro-sports* em https://toro-sports-api.staging-xapps.dev/" ${SLACK_API_URL}
    - curl -X POST -d "token=${SLACK_BOT_TOKEN}&channel=${SLACK_CHANNEL}&text=- *-------------------------------------*" ${SLACK_API_URL}
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH_RELEASE
  dependencies: ["build-staging"]

# ***************************************** #
# The following stages will configure       #
# the terraform infrastructure              #
# ***************************************** #

validate:
  extends: .terraform:validate
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH_MASTER

build:
  extends: .terraform:build
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH_MASTER
  dependencies:
    - validate

deploy:
  extends: .terraform:deploy
  when: on_success
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH_MASTER
  dependencies:
    - build


# ***************************************** #
# The following stages will build docker    #
# image and push to aws ecr                 #
# ***************************************** #
prod-app-build:
  stage: prod-app-build
  image: docker:stable
  services:
    - docker:19.03-dind
  before_script:
    # install aws from python
    - apk add --update --no-cache python3 py3-pip && pip3 install --upgrade pip && pip install --no-cache-dir --upgrade awscli
  script:
    # get aws account id
    - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
    - echo $AWS_ACCOUNT_ID
    # define docker image name
    - DOCKER_IMAGE_NAME=server-${TF_VAR_tag_name}
    # build docker image
    - docker build --no-cache -t ${DOCKER_IMAGE_NAME} .
    # check built image
    - docker images --filter reference=${DOCKER_IMAGE_NAME}
    # authenticate to aws ecr
    - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DOCKER_IMAGE_NAME}
    # Tag the image to push on aws ecr repository.
    - docker tag ${DOCKER_IMAGE_NAME}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DOCKER_IMAGE_NAME}:latest
    # Push the image
    - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${DOCKER_IMAGE_NAME}:latest
  after_script:
    # terminate all aws ec2 instances to be re-created with updated images
    - $(aws ec2 terminate-instances --instance-ids $(aws ec2 describe-instances | grep InstanceId | awk {'print $2'} | sed 's/[",]//g')) > /dev/null 2>&1
  when: on_success
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH_MASTER
  dependencies:
    - deploy

